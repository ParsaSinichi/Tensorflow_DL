{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "test.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyORbytj1cD31DZ2mYVZ6TK8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zlximon/Tensorflow_DL/blob/master/regression_1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "88Zrgcf0Gulw"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=[-7.0, -4.0, -1.0, 2.0, 5.0, 8.0, 11.0, 14.0]\n",
        "y=[3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0]\n",
        "x=tf.constant(x,dtype=tf.float32)\n",
        "y=tf.constant(y,dtype=tf.float32)\n",
        "x,y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l8TQvXxhvJRY",
        "outputId": "25315ca0-a2d9-494e-bee2-19894f8fa436"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<tf.Tensor: shape=(8,), dtype=float32, numpy=array([-7., -4., -1.,  2.,  5.,  8., 11., 14.], dtype=float32)>,\n",
              " <tf.Tensor: shape=(8,), dtype=float32, numpy=array([ 3.,  6.,  9., 12., 15., 18., 21., 24.], dtype=float32)>)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "UWzcbyh-OGw1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "GKkS2qzFvhuD",
        "outputId": "03f097f1-b827-4d3c-9cbb-0fb94331752b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fd7e05fec10>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x,tf.expand_dims(x, axis=-1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V4-vIvtoSWwK",
        "outputId": "55e7ad65-179d-4cbb-bc8e-7c0c2dc591fa"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<tf.Tensor: shape=(8,), dtype=float32, numpy=array([-7., -4., -1.,  2.,  5.,  8., 11., 14.], dtype=float32)>,\n",
              " <tf.Tensor: shape=(8, 1), dtype=float32, numpy=\n",
              " array([[-7.],\n",
              "        [-4.],\n",
              "        [-1.],\n",
              "        [ 2.],\n",
              "        [ 5.],\n",
              "        [ 8.],\n",
              "        [11.],\n",
              "        [14.]], dtype=float32)>)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "P9bDtEIWSWdX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "so we have to create and compile our model \n",
        "and at the end fitting model "
      ],
      "metadata": {
        "id": "Ghcb_WAPOUgi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tf.random.set_seed(42)\n",
        "# creating model\n",
        "model =tf.keras.Sequential([\n",
        "                          \n",
        "  tf.keras.layers.Dense(1)                            \n",
        "])\n",
        "# complie \n",
        "tf.keras.metrics.mae\n",
        "model.compile (loss=tf.keras.losses.mae,optimizer=tf.keras.optimizers.SGD(),metrics=tf.keras.metrics.mae)\n",
        "#fit model\n",
        "model.fit(tf.expand_dims(x, axis=-1), y, epochs=10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xct84gCHOUcY",
        "outputId": "6452a0aa-930c-43cf-873f-650dd3fb9280"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "1/1 [==============================] - 4s 4s/step - loss: 11.5048 - mean_absolute_error: 11.5048\n",
            "Epoch 2/10\n",
            "1/1 [==============================] - 0s 14ms/step - loss: 11.3723 - mean_absolute_error: 11.3723\n",
            "Epoch 3/10\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 11.2398 - mean_absolute_error: 11.2398\n",
            "Epoch 4/10\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 11.1073 - mean_absolute_error: 11.1073\n",
            "Epoch 5/10\n",
            "1/1 [==============================] - 0s 12ms/step - loss: 10.9748 - mean_absolute_error: 10.9748\n",
            "Epoch 6/10\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 10.8423 - mean_absolute_error: 10.8423\n",
            "Epoch 7/10\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 10.7098 - mean_absolute_error: 10.7098\n",
            "Epoch 8/10\n",
            "1/1 [==============================] - 0s 15ms/step - loss: 10.5773 - mean_absolute_error: 10.5773\n",
            "Epoch 9/10\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 10.4448 - mean_absolute_error: 10.4448\n",
            "Epoch 10/10\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 10.3123 - mean_absolute_error: 10.3123\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fd76e3bc610>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.predict([17.0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JhbsWBe5Uanr",
        "outputId": "cb0dd7e9-0765-4062-a7fb-4f94974270db"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[15.741023]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "h6dvjdVfseBB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#imporve our model in 3 way => in creating procces ,in comling , and in fitting \n",
        "model=tf.keras.Sequential([\n",
        "tf.keras.layers.Dense(100,activation=\"relu\") ,\n",
        "tf.keras.layers.Dense(100,activation=\"relu\") ,\n",
        "tf.keras.layers.Dense(100,activation=\"relu\") ,\n",
        "tf.keras.layers.Dense(1)                           \n",
        "\n",
        "])\n",
        "model.compile(loss=tf.losses.mae,optimizer=tf.optimizers.Adam(lr=0.01),metrics=[\"mae\"])\n",
        "model.fit(tf.expand_dims(x, axis=-1), y, epochs=100)\n",
        "# we can difine input shape manually like tf.keras.layers.Dense(1,input_shape=[1])                           \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ER8TWBhXUagz",
        "outputId": "a64337fa-ab89-4220-e135-a28673754505"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(Adam, self).__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 721ms/step - loss: 14.3099 - mae: 14.3099\n",
            "Epoch 2/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 12.1094 - mae: 12.1094\n",
            "Epoch 3/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 10.0935 - mae: 10.0935\n",
            "Epoch 4/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 7.7100 - mae: 7.7100\n",
            "Epoch 5/100\n",
            "1/1 [==============================] - 0s 10ms/step - loss: 4.1881 - mae: 4.1881\n",
            "Epoch 6/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 6.0951 - mae: 6.0951\n",
            "Epoch 7/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 7.2322 - mae: 7.2322\n",
            "Epoch 8/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 5.8670 - mae: 5.8670\n",
            "Epoch 9/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 4.3112 - mae: 4.3112\n",
            "Epoch 10/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 3.9136 - mae: 3.9136\n",
            "Epoch 11/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 5.1832 - mae: 5.1832\n",
            "Epoch 12/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 5.5683 - mae: 5.5683\n",
            "Epoch 13/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 5.2566 - mae: 5.2566\n",
            "Epoch 14/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 4.3430 - mae: 4.3430\n",
            "Epoch 15/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 3.4644 - mae: 3.4644\n",
            "Epoch 16/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 3.7662 - mae: 3.7662\n",
            "Epoch 17/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 4.2944 - mae: 4.2944\n",
            "Epoch 18/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 4.4026 - mae: 4.4026\n",
            "Epoch 19/100\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 4.0816 - mae: 4.0816\n",
            "Epoch 20/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 3.4548 - mae: 3.4548\n",
            "Epoch 21/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 3.1246 - mae: 3.1246\n",
            "Epoch 22/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 3.6346 - mae: 3.6346\n",
            "Epoch 23/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 3.7149 - mae: 3.7149\n",
            "Epoch 24/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 3.0509 - mae: 3.0509\n",
            "Epoch 25/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 2.7960 - mae: 2.7960\n",
            "Epoch 26/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 2.8846 - mae: 2.8846\n",
            "Epoch 27/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 2.7157 - mae: 2.7157\n",
            "Epoch 28/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 2.3621 - mae: 2.3621\n",
            "Epoch 29/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 2.2013 - mae: 2.2013\n",
            "Epoch 30/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 2.0066 - mae: 2.0066\n",
            "Epoch 31/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 1.6739 - mae: 1.6739\n",
            "Epoch 32/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 1.4164 - mae: 1.4164\n",
            "Epoch 33/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.9649 - mae: 0.9649\n",
            "Epoch 34/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 1.1689 - mae: 1.1689\n",
            "Epoch 35/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 0.6564 - mae: 0.6564\n",
            "Epoch 36/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.6408 - mae: 0.6408\n",
            "Epoch 37/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.7872 - mae: 0.7872\n",
            "Epoch 38/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 1.0425 - mae: 1.0425\n",
            "Epoch 39/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.6846 - mae: 0.6846\n",
            "Epoch 40/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 1.4782 - mae: 1.4782\n",
            "Epoch 41/100\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 1.1676 - mae: 1.1676\n",
            "Epoch 42/100\n",
            "1/1 [==============================] - 0s 10ms/step - loss: 0.9014 - mae: 0.9014\n",
            "Epoch 43/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 1.0710 - mae: 1.0710\n",
            "Epoch 44/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.3967 - mae: 0.3967\n",
            "Epoch 45/100\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.7617 - mae: 0.7617\n",
            "Epoch 46/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 0.3968 - mae: 0.3968\n",
            "Epoch 47/100\n",
            "1/1 [==============================] - 0s 13ms/step - loss: 0.8257 - mae: 0.8257\n",
            "Epoch 48/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.4148 - mae: 0.4148\n",
            "Epoch 49/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 1.1780 - mae: 1.1780\n",
            "Epoch 50/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 1.2283 - mae: 1.2283\n",
            "Epoch 51/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 0.5331 - mae: 0.5331\n",
            "Epoch 52/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 1.2348 - mae: 1.2348\n",
            "Epoch 53/100\n",
            "1/1 [==============================] - 0s 5ms/step - loss: 1.3417 - mae: 1.3417\n",
            "Epoch 54/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.5670 - mae: 0.5670\n",
            "Epoch 55/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 1.3346 - mae: 1.3346\n",
            "Epoch 56/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 1.7505 - mae: 1.7505\n",
            "Epoch 57/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.9810 - mae: 0.9810\n",
            "Epoch 58/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.7677 - mae: 0.7677\n",
            "Epoch 59/100\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 1.2082 - mae: 1.2082\n",
            "Epoch 60/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.8040 - mae: 0.8040\n",
            "Epoch 61/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.6035 - mae: 0.6035\n",
            "Epoch 62/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.7748 - mae: 0.7748\n",
            "Epoch 63/100\n",
            "1/1 [==============================] - 0s 10ms/step - loss: 0.2493 - mae: 0.2493\n",
            "Epoch 64/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.1911 - mae: 0.1911\n",
            "Epoch 65/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.2576 - mae: 0.2576\n",
            "Epoch 66/100\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 0.2354 - mae: 0.2354\n",
            "Epoch 67/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.3194 - mae: 0.3194\n",
            "Epoch 68/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.3929 - mae: 0.3929\n",
            "Epoch 69/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.2379 - mae: 0.2379\n",
            "Epoch 70/100\n",
            "1/1 [==============================] - 0s 10ms/step - loss: 0.8949 - mae: 0.8949\n",
            "Epoch 71/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 0.7732 - mae: 0.7732\n",
            "Epoch 72/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.3582 - mae: 0.3582\n",
            "Epoch 73/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.4289 - mae: 0.4289\n",
            "Epoch 74/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.2657 - mae: 0.2657\n",
            "Epoch 75/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.0990 - mae: 0.0990\n",
            "Epoch 76/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.1148 - mae: 0.1148\n",
            "Epoch 77/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.2166 - mae: 0.2166\n",
            "Epoch 78/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.4491 - mae: 0.4491\n",
            "Epoch 79/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.2172 - mae: 0.2172\n",
            "Epoch 80/100\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 0.7538 - mae: 0.7538\n",
            "Epoch 81/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.6958 - mae: 0.6958\n",
            "Epoch 82/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.3540 - mae: 0.3540\n",
            "Epoch 83/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.2373 - mae: 0.2373\n",
            "Epoch 84/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.7743 - mae: 0.7743\n",
            "Epoch 85/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.7285 - mae: 0.7285\n",
            "Epoch 86/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.3481 - mae: 0.3481\n",
            "Epoch 87/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.4131 - mae: 0.4131\n",
            "Epoch 88/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.4374 - mae: 0.4374\n",
            "Epoch 89/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.3659 - mae: 0.3659\n",
            "Epoch 90/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.5398 - mae: 0.5398\n",
            "Epoch 91/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.5042 - mae: 0.5042\n",
            "Epoch 92/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.3017 - mae: 0.3017\n",
            "Epoch 93/100\n",
            "1/1 [==============================] - 0s 8ms/step - loss: 0.0940 - mae: 0.0940\n",
            "Epoch 94/100\n",
            "1/1 [==============================] - 0s 9ms/step - loss: 0.7845 - mae: 0.7845\n",
            "Epoch 95/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.7625 - mae: 0.7625\n",
            "Epoch 96/100\n",
            "1/1 [==============================] - 0s 12ms/step - loss: 0.1959 - mae: 0.1959\n",
            "Epoch 97/100\n",
            "1/1 [==============================] - 0s 6ms/step - loss: 0.1071 - mae: 0.1071\n",
            "Epoch 98/100\n",
            "1/1 [==============================] - 0s 7ms/step - loss: 0.7118 - mae: 0.7118\n",
            "Epoch 99/100\n",
            "1/1 [==============================] - 0s 10ms/step - loss: 0.7806 - mae: 0.7806\n",
            "Epoch 100/100\n",
            "1/1 [==============================] - 0s 11ms/step - loss: 0.2188 - mae: 0.2188\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fd76e119190>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.predict([17.0])\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VNrYdzl-Uaec",
        "outputId": "ffdd640c-64fc-4e37-806a-9fa7119e4464"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[30.00716]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "create model with larger data"
      ],
      "metadata": {
        "id": "GgHZsaYcoFfc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x1=tf.range(-100,100,4)\n",
        "y1=x1+10\n"
      ],
      "metadata": {
        "id": "iJ1Acn0EnvSf"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=x1[:40]\n",
        "y_train=y1[:40]\n",
        "x_test=x1[40:]\n",
        "y_test=y1[40:]\n",
        "len(x_test),len(y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RyHNYb7PnvN3",
        "outputId": "ca712793-9da8-4e09-9faf-0bb491d93307"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#visualizing our new data "
      ],
      "metadata": {
        "id": "qzBdjfC_pD47"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(x_train,y_train,c=\"red\",label=\"training data \")\n",
        "plt.scatter(x_test,y_test,c=\"green\",label=\"test data \")\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "g_b-FUjwosm7",
        "outputId": "8f1556f6-3189-41ff-8774-3c1639d42857"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7fd756ee00d0>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#create model\n",
        "model1=tf.keras.Sequential([\n",
        "tf.keras.layers.Dense(1,input_shape=[1])                            # we have 1 x to predict 1 y in every time \n",
        "\n",
        "])\n",
        "model1.compile(loss=tf.losses.mae,optimizer=tf.keras.optimizers.SGD(),metrics=[\"mae\"])\n",
        "model.fit(x_train, y_train, epochs=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fLSE0nYwqwAk",
        "outputId": "b8235a06-4227-4f70-d87f-8c8773636243"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.9935 - mae: 0.9935\n",
            "Epoch 2/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.5196 - mae: 1.5196\n",
            "Epoch 3/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.7465 - mae: 0.7465\n",
            "Epoch 4/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.1152 - mae: 2.1152\n",
            "Epoch 5/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.5702 - mae: 1.5702\n",
            "Epoch 6/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.2732 - mae: 1.2732\n",
            "Epoch 7/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.8759 - mae: 0.8759\n",
            "Epoch 8/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.6976 - mae: 1.6976\n",
            "Epoch 9/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.5463 - mae: 1.5463\n",
            "Epoch 10/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.2494 - mae: 2.2494\n",
            "Epoch 11/100\n",
            "2/2 [==============================] - 0s 11ms/step - loss: 2.7170 - mae: 2.7170\n",
            "Epoch 12/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.2464 - mae: 1.2464\n",
            "Epoch 13/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.4373 - mae: 1.4373\n",
            "Epoch 14/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.0874 - mae: 1.0874\n",
            "Epoch 15/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.9374 - mae: 0.9374\n",
            "Epoch 16/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.0504 - mae: 1.0504\n",
            "Epoch 17/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.6240 - mae: 1.6240\n",
            "Epoch 18/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.1478 - mae: 1.1478\n",
            "Epoch 19/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.8625 - mae: 2.8625\n",
            "Epoch 20/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 3.0877 - mae: 3.0877\n",
            "Epoch 21/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.8975 - mae: 1.8975\n",
            "Epoch 22/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.0439 - mae: 2.0439\n",
            "Epoch 23/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 3.2612 - mae: 3.2612\n",
            "Epoch 24/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 3.3274 - mae: 3.3274\n",
            "Epoch 25/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.7927 - mae: 1.7927\n",
            "Epoch 26/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.9950 - mae: 2.9950\n",
            "Epoch 27/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 3.2564 - mae: 3.2564\n",
            "Epoch 28/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.2126 - mae: 1.2126\n",
            "Epoch 29/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 3.4415 - mae: 3.4415\n",
            "Epoch 30/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 3.0384 - mae: 3.0384\n",
            "Epoch 31/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.9813 - mae: 1.9813\n",
            "Epoch 32/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.8277 - mae: 1.8277\n",
            "Epoch 33/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.0835 - mae: 2.0835\n",
            "Epoch 34/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.2668 - mae: 1.2668\n",
            "Epoch 35/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.4283 - mae: 1.4283\n",
            "Epoch 36/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.8097 - mae: 0.8097\n",
            "Epoch 37/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.4015 - mae: 1.4015\n",
            "Epoch 38/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.0010 - mae: 1.0010\n",
            "Epoch 39/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.1012 - mae: 1.1012\n",
            "Epoch 40/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.7513 - mae: 0.7513\n",
            "Epoch 41/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.5510 - mae: 0.5510\n",
            "Epoch 42/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.3182 - mae: 0.3182\n",
            "Epoch 43/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.3660 - mae: 0.3660\n",
            "Epoch 44/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.4326 - mae: 0.4326\n",
            "Epoch 45/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.8330 - mae: 0.8330\n",
            "Epoch 46/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.4045 - mae: 1.4045\n",
            "Epoch 47/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.2907 - mae: 1.2907\n",
            "Epoch 48/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.3748 - mae: 1.3748\n",
            "Epoch 49/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.3815 - mae: 0.3815\n",
            "Epoch 50/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.8782 - mae: 1.8782\n",
            "Epoch 51/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.3110 - mae: 1.3110\n",
            "Epoch 52/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 2.5132 - mae: 2.5132\n",
            "Epoch 53/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 3.0702 - mae: 3.0702\n",
            "Epoch 54/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.6823 - mae: 1.6823\n",
            "Epoch 55/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.0995 - mae: 1.0995\n",
            "Epoch 56/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.0858 - mae: 1.0858\n",
            "Epoch 57/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.0734 - mae: 1.0734\n",
            "Epoch 58/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.3965 - mae: 1.3965\n",
            "Epoch 59/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.4331 - mae: 1.4331\n",
            "Epoch 60/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.9111 - mae: 1.9111\n",
            "Epoch 61/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.3650 - mae: 1.3650\n",
            "Epoch 62/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.8878 - mae: 1.8878\n",
            "Epoch 63/100\n",
            "2/2 [==============================] - 0s 10ms/step - loss: 1.8060 - mae: 1.8060\n",
            "Epoch 64/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 2.0634 - mae: 2.0634\n",
            "Epoch 65/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.8953 - mae: 0.8953\n",
            "Epoch 66/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.6818 - mae: 1.6818\n",
            "Epoch 67/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.6586 - mae: 1.6586\n",
            "Epoch 68/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.9955 - mae: 1.9955\n",
            "Epoch 69/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.2770 - mae: 1.2770\n",
            "Epoch 70/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.5444 - mae: 1.5444\n",
            "Epoch 71/100\n",
            "2/2 [==============================] - 0s 7ms/step - loss: 1.0229 - mae: 1.0229\n",
            "Epoch 72/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.4618 - mae: 1.4618\n",
            "Epoch 73/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.4052 - mae: 1.4052\n",
            "Epoch 74/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.9250 - mae: 0.9250\n",
            "Epoch 75/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.6530 - mae: 1.6530\n",
            "Epoch 76/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.8464 - mae: 0.8464\n",
            "Epoch 77/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.4214 - mae: 1.4214\n",
            "Epoch 78/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.2014 - mae: 0.2014\n",
            "Epoch 79/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 2.0872 - mae: 2.0872\n",
            "Epoch 80/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 2.6641 - mae: 2.6641\n",
            "Epoch 81/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.3368 - mae: 1.3368\n",
            "Epoch 82/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.6850 - mae: 1.6850\n",
            "Epoch 83/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 2.4041 - mae: 2.4041\n",
            "Epoch 84/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.0556 - mae: 1.0556\n",
            "Epoch 85/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.7281 - mae: 0.7281\n",
            "Epoch 86/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.0933 - mae: 1.0933\n",
            "Epoch 87/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.7753 - mae: 0.7753\n",
            "Epoch 88/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.8623 - mae: 0.8623\n",
            "Epoch 89/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.1324 - mae: 1.1324\n",
            "Epoch 90/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.8797 - mae: 0.8797\n",
            "Epoch 91/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.8805 - mae: 0.8805\n",
            "Epoch 92/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 0.9234 - mae: 0.9234\n",
            "Epoch 93/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.7424 - mae: 0.7424\n",
            "Epoch 94/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.5338 - mae: 0.5338\n",
            "Epoch 95/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.3853 - mae: 0.3853\n",
            "Epoch 96/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 0.6835 - mae: 0.6835\n",
            "Epoch 97/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.5483 - mae: 1.5483\n",
            "Epoch 98/100\n",
            "2/2 [==============================] - 0s 6ms/step - loss: 1.8337 - mae: 1.8337\n",
            "Epoch 99/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 1.7078 - mae: 1.7078\n",
            "Epoch 100/100\n",
            "2/2 [==============================] - 0s 5ms/step - loss: 2.7668 - mae: 2.7668\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fd74b759fd0>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t-pN6oZ6qv3R",
        "outputId": "c51c193c-bf00-480d-9e20-88ebc9d9e4ff"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 71.61841 ],\n",
              "       [ 75.72913 ],\n",
              "       [ 79.85421 ],\n",
              "       [ 83.99973 ],\n",
              "       [ 88.14524 ],\n",
              "       [ 92.29076 ],\n",
              "       [ 96.436264],\n",
              "       [100.58178 ],\n",
              "       [104.7275  ],\n",
              "       [108.87371 ]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model1.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JQ5zW7VNs_h2",
        "outputId": "cbfaf455-fd9a-426b-f224-f0aefe872dde"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_6 (Dense)             (None, 1)                 2         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 2\n",
            "Trainable params: 2\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "raCR8aWZs_bP"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}